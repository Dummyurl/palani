<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */
require APPPATH . 'libraries/REST_Controller.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Api extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['users_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['users_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['users_delete']['limit'] = 50; // 50 requests per hour per user/key
    }

    public function users_get()
    {
        // Users from a data store e.g. database
        $users = [
            ['id' => 1, 'name' => 'John', 'email' => 'john@example.com', 'fact' => 'Loves coding'],
            ['id' => 2, 'name' => 'Jim', 'email' => 'jim@example.com', 'fact' => 'Developed on CodeIgniter'],
            ['id' => 3, 'name' => 'Jane', 'email' => 'jane@example.com', 'fact' => 'Lives in the USA', ['hobbies' => ['guitar', 'cycling']]],
        ];

        $id = $this->get('id');

        // If the id parameter doesn't exist return all the users

        if ($id === NULL)
        {
            // Check if the users data store contains users (in case the database result returns NULL)
            if ($users)
            {
                // Set the response and exit
                $this->response($users, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'message' => 'No users were found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        }

        // Find and return a single record for a particular user.

        $id = (int) $id;

        // Validate the id.
        if ($id <= 0)
        {
            // Invalid id, set the response and exit.
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Get the user from the array, using the id as key for retrieval.
        // Usually a model is to be used for this.

        $user = NULL;

        if (!empty($users))
        {
            foreach ($users as $key => $value)
            {
                if (isset($value['id']) && $value['id'] === $id)
                {
                    $user = $value;
                }
            }
        }

        if (!empty($user))
        {
            $this->set_response($user, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->set_response([
                'status' => FALSE,
                'message' => 'User could not be found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function users_post()
    {
        // $this->some_model->update_user( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function users_delete()
    {
        $id = (int) $this->get('id');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }
    
    public function login_post()
    {
        $username = $this->post('email');
        $password = $this->post('password');
        $query = $this->db->query("SELECT * FROM `applicants` WHERE `email` = '".$username."'  AND `password` = '".MD5($password)."' AND `delete_sts` = 0 ;")->row_array();
        $empty = new stdClass();
        $result = new stdClass();
        if(!empty($query))
        {
            $result->success = true;
            $result->code = 200;
            $result->data = $query;
            $result->message = 'Loggedin Successfully';
        }else{
            $result->success = false;
            $result->code = 400;
            $result->data = $empty;
            $result->message = 'Invalid Username or Password';
        }
        $this->set_response($result, REST_Controller::HTTP_CREATED);
    }
    
    public function conversation_list_today_post()
    {
        $user_id = $this->post('user_id');
        $query = $this->db->query("SELECT * FROM `applicants` WHERE `id` = '".$user_id."'")->row_array();
        if(!empty($query))
        {
            if($query['role'] == 0){
                $this->db->select('t1.invite_id,t1.invite_date,t1.invite_time,ADDTIME(t1.invite_time,"01:00:00") as invite_expire,t1.current_status,t2.id as app_id,t2.first_name,t2.last_name,t2.username,t2.profile_img,t3.mentor_personal_message,COUNT(t4.rating) as rating_count,ROUND(AVG(t4.rating)) as rating_value');
                $this->db->from('invite t1');
                $this->db->where('t1.invite_from',$user_id);
                $this->db->where('t1.delete_sts',0);
                //$this->db->where('t1.current_status',0);
                $this->db->where('t1.approved',1);
                $this->db->where('t1.invite_date',date('Y-m-d'));
                $this->db->join('applicants t2','t2.id=t1.invite_to','left');
                $this->db->join('mentor_details t3','t3.mentor_id=t1.invite_to','left');
                $this->db->join('review_ratings t4','t4.user_id=t1.invite_to','left');
				$this->db->order_by('t1.invite_id','desc');
                $this->db->group_by('t1.invite_id');
                $res = $this->db->get()->result_array();
                $day_result = $res;
            }
            if($query['role'] == 1){
                $this->db->select('t1.invite_id,t1.invite_date,t1.invite_time,ADDTIME(t1.invite_time,"01:00:00") as invite_expire,t1.current_status,t2.id as app_id,t2.first_name,t2.last_name,t2.username,t2.profile_img');
                $this->db->from('invite t1');
                $this->db->where('t1.invite_to',$user_id);
                $this->db->where('t1.delete_sts',0);
                //$this->db->where('t1.current_status',0);
                $this->db->where('t1.approved',1);
                $this->db->where('t1.invite_date',date('Y-m-d'));
                $this->db->join('applicants t2','t2.id=t1.invite_from','left');
                $this->db->join('applicants_profile t3','t3.applicant_id=t1.invite_from','left');
				$this->db->order_by('t1.invite_id','desc');
                $res = $this->db->get()->result_array();
                
                $day_result = $res;
            }
             $resultSet = $day_result;
        
             $result = new stdClass();

             $result->success = true;
             $result->code = 200;
             $result->data = $resultSet;

             $this->set_response($result, REST_Controller::HTTP_CREATED);
        
        }else{
            $result = new stdClass();
            $result1 = new stdClass();
            $result->success = false;
            $result->code = 400;
            $result->data = $result1;
            $result->message = 'User does not exist';
            $this->set_response($result, REST_Controller::HTTP_CREATED);
        }
       
    }
    
    public function conversation_list_week_post()
    {
             
        $monday = strtotime("today");
        $monday = date('w', $monday)==date('w') ? $monday+7*86400 : $monday;
        $sunday = strtotime(date("Y-m-d",$monday)." +6 days");
        $this_week_sd = date("Y-m-d",$monday);
        $this_week_ed = date("Y-m-d",$sunday);
        
		$dt = date("Y-m-d");
        $end = date( "Y-m-d", strtotime( "$dt +6 days" ) );
        
        $user_id = $this->post('user_id');
        $query = $this->db->query("SELECT * FROM `applicants` WHERE `id` = '".$user_id."'")->row_array();
        if(!empty($query))
        {
            if($query['role'] == 0){
                $this->db->select('t1.invite_id,t1.invite_date,t1.invite_time,ADDTIME(t1.invite_time,"01:00:00") as invite_expire,t1.current_status,t2.id as app_id,t2.first_name,t2.last_name,t2.username,t2.profile_img,t3.mentor_personal_message,COUNT(t4.rating) as rating_count,ROUND(AVG(t4.rating)) as rating_value');
                $this->db->from('invite t1');
                $this->db->where('t1.invite_from',$user_id);
                $this->db->where('t1.delete_sts',0);
                //$this->db->where('t1.current_status',0);
                $this->db->where('t1.approved',1);
                $this->db->where("t1.invite_date BETWEEN '$dt' AND '$end'");
                $this->db->join('applicants t2','t2.id=t1.invite_to','left');
                $this->db->join('mentor_details t3','t3.mentor_id=t1.invite_to','left');
                $this->db->join('review_ratings t4','t4.user_id=t1.invite_to','left');
				$this->db->order_by('t1.invite_id','desc');
                $this->db->group_by('t1.invite_id');
                $res = $this->db->get()->result_array();
                $week_result = $res;
            }
            if($query['role'] == 1){
                $this->db->select('t1.invite_id,t1.invite_date,t1.invite_time,ADDTIME(t1.invite_time,"01:00:00") as invite_expire,t1.current_status,t2.id as app_id,t2.first_name,t2.last_name,t2.username,t2.profile_img');
                $this->db->from('invite t1');
                $this->db->where('t1.invite_to',$user_id);
                $this->db->where('t1.delete_sts',0);
                //$this->db->where('t1.current_status',0);
                $this->db->where('t1.approved',1);
                $this->db->where("t1.invite_date BETWEEN '$dt' AND '$end'");
                $this->db->join('applicants t2','t2.id=t1.invite_from','left');
                $this->db->join('applicants_profile t3','t3.applicant_id=t1.invite_from','left');
				$this->db->order_by('t1.invite_id','desc');
                $res = $this->db->get()->result_array();
                
                $week_result = $res;
            }
             $resultSet = $week_result;
        
             $result = new stdClass();

             $result->success = true;
             $result->code = 200;
             $result->data = $resultSet;

             $this->set_response($result, REST_Controller::HTTP_CREATED);
        
        }else{
            $result = new stdClass();
            $result1 = new stdClass();
            $result->success = false;
            $result->code = 400;
            $result->data = $result1;
            $result->message = 'User does not exist';
            $this->set_response($result, REST_Controller::HTTP_CREATED);
        }
        
    }

    public function conversation_list_month_post()
    {
		$dt = date("Y-m-d");
        $end = date( "Y-m-d", strtotime( "$dt +30 days" ) );
		
        $user_id = $this->post('user_id');
        $query = $this->db->query("SELECT * FROM `applicants` WHERE `id` = '".$user_id."'")->row_array();
        if(!empty($query))
        {
            if($query['role'] == 0){
                $this->db->select('t1.invite_id,t1.invite_date,t1.invite_time,ADDTIME(t1.invite_time,"01:00:00") as invite_expire,t1.current_status,t2.id as app_id,t2.first_name,t2.last_name,t2.username,t2.profile_img,t3.mentor_personal_message,COUNT(t4.rating) as rating_count,ROUND(AVG(t4.rating)) as rating_value');
                $this->db->from('invite t1');
                $this->db->where('t1.invite_from',$user_id);
                $this->db->where('t1.delete_sts',0);
                //$this->db->where('t1.current_status',0);
                $this->db->where('t1.approved',1);
                $this->db->where("t1.invite_date BETWEEN '$dt' AND '$end'");
                $this->db->join('applicants t2','t2.id=t1.invite_to','left');
                $this->db->join('mentor_details t3','t3.mentor_id=t1.invite_to','left');
                $this->db->join('review_ratings t4','t4.user_id=t1.invite_to','left');
				$this->db->order_by('t1.invite_id','desc');
                $this->db->group_by('t1.invite_id');
                $res = $this->db->get()->result_array();
                $month_result = $res;
            }
            if($query['role'] == 1){
                $this->db->select('t1.invite_id,t1.invite_date,t1.invite_time,ADDTIME(t1.invite_time,"01:00:00") as invite_expire,t1.current_status,t2.id as app_id,t2.first_name,t2.last_name,t2.username,t2.profile_img');
                $this->db->from('invite t1');
                $this->db->where('t1.invite_to',$user_id);
                $this->db->where('t1.delete_sts',0);
                //$this->db->where('t1.current_status',0);
                $this->db->where('t1.approved',1);
                $this->db->where("t1.invite_date BETWEEN '$dt' AND '$end'");
                $this->db->join('applicants t2','t2.id=t1.invite_from','left');
                $this->db->join('applicants_profile t3','t3.applicant_id=t1.invite_from','left');
				$this->db->order_by('t1.invite_id','desc');
                $res = $this->db->get()->result_array();
                
                $month_result = $res;
            }
             $resultSet = $month_result;
        
             $result = new stdClass();

             $result->success = true;
             $result->code = 200;
             $result->data = $resultSet;

             $this->set_response($result, REST_Controller::HTTP_CREATED);
        
        }else{
            $result = new stdClass();
            $result1 = new stdClass();
            $result->success = false;
            $result->code = 400;
            $result->data = $result1;
            $result->message = 'User does not exist';
            $this->set_response($result, REST_Controller::HTTP_CREATED);
        }
        
    }
	
	public function call_status_post()
	{
	       $data['status'] = $this->post('status');
           $data['invite_id'] = $this->post('invite_id');
                $st_time = $this->post('start_time');
                $end = $this->post('end_time');
		   
                $start_seconds = $st_time / 1000;
               $end_seconds = $end / 1000;
               
//               $to_time = strtotime($st_time);
//               $from_time = strtotime($end);
//               $duration = round(abs($to_time - $from_time) / 60,2);

               $data['invite_date'] = date('Y-m-d',$start_seconds);
               $data['start_time'] = date("H:i:s", $start_seconds);
               $data['end_time'] = date("H:i:s", $end_seconds);
		   		
           if($this->db->insert('call_logs',$data)){
			    $this->db->where('invite_id',$data['invite_id']);
		        $this->db->update('invite',array('current_status'=>1));
		  
		   }
		   $result = new stdClass();

		   $result->success = true;
		   $result->code = 200;

		   $this->set_response($result, REST_Controller::HTTP_CREATED);
           		   
	}
	
	public function call_list_today_post()
    {
        $user_id = $this->post('user_id');
        $query = $this->db->query("SELECT * FROM `applicants` WHERE `id` = '".$user_id."'")->row_array();
        if(!empty($query))
        {
            if($query['role'] == 0){
                $this->db->select('t1.invite_id,t1.invite_date,t1.invite_time,ADDTIME(t1.invite_time,"01:00:00") as invite_expire,t1.current_status,t2.id as app_id,t2.first_name,t2.last_name,t2.username,t2.profile_img,t3.mentor_personal_message,COUNT(t4.rating) as rating_count,ROUND(AVG(t4.rating)) as rating_value,IF(t5.start_time IS NULL," ",ROUND(UNIX_TIMESTAMP(t5.start_time) * 1000)) as start_time,IF(t5.end_time IS NULL," ",ROUND(UNIX_TIMESTAMP(t5.end_time) * 1000)) as end_time,IF(t5.end_time IS NULL," ",UNIX_TIMESTAMP(t5.end_time) - UNIX_TIMESTAMP(t5.start_time)) AS duration');
                $this->db->from('invite t1');
                $this->db->where('t1.invite_from',$user_id);
                $this->db->where('t1.delete_sts',0);
                //$this->db->where('t1.current_status',0);
                $this->db->where('t1.approved',1);
                $this->db->where('t1.invite_date',date('Y-m-d'));
                $this->db->join('applicants t2','t2.id=t1.invite_to','left');
                $this->db->join('mentor_details t3','t3.mentor_id=t1.invite_to','left');
                $this->db->join('review_ratings t4','t4.user_id=t1.invite_to','left');
				$this->db->join('call_logs t5','t5.invite_id=t1.invite_id','left');
				$this->db->order_by('t1.invite_id','desc');
                $this->db->group_by('t1.invite_id');
                $res = $this->db->get()->result_array();
                $day_result = $res;
            }
            if($query['role'] == 1){
                $this->db->select('t1.invite_id,t1.invite_date,t1.invite_time,ADDTIME(t1.invite_time,"01:00:00") as invite_expire,t1.current_status,t2.id as app_id,t2.first_name,t2.last_name,t2.username,t2.profile_img,IF(t5.start_time IS NULL," ",ROUND(UNIX_TIMESTAMP(t5.start_time) * 1000)) as start_time,IF(t5.end_time IS NULL," ",ROUND(UNIX_TIMESTAMP(t5.end_time) * 1000)) as end_time,IF(t5.end_time IS NULL," ",UNIX_TIMESTAMP(t5.end_time) - UNIX_TIMESTAMP(t5.start_time)) AS duration');
                $this->db->from('invite t1');
                $this->db->where('t1.invite_to',$user_id);
                $this->db->where('t1.delete_sts',0);
                //$this->db->where('t1.current_status',0);
                $this->db->where('t1.approved',1);
                $this->db->where('t1.invite_date',date('Y-m-d'));
                $this->db->join('applicants t2','t2.id=t1.invite_from','left');
                $this->db->join('applicants_profile t3','t3.applicant_id=t1.invite_from','left');
				$this->db->join('call_logs t5','t5.invite_id=t1.invite_id','left');
				$this->db->order_by('t1.invite_id','desc');
                $res = $this->db->get()->result_array();
                
                $day_result = $res;
            }
             $resultSet = $day_result;
        
             $result = new stdClass();

             $result->success = true;
             $result->code = 200;
             $result->data = $resultSet;

             $this->set_response($result, REST_Controller::HTTP_CREATED);
        
        }else{
            $result = new stdClass();
            $result1 = new stdClass();
            $result->success = false;
            $result->code = 400;
            $result->data = $result1;
            $result->message = 'User does not exist';
            $this->set_response($result, REST_Controller::HTTP_CREATED);
        }
       
    }
    
    public function call_list_week_post()
    {
             
        $monday = strtotime("today");
        $monday = date('w', $monday)==date('w') ? $monday+7*86400 : $monday;
        $sunday = strtotime(date("Y-m-d",$monday)." +6 days");
        $this_week_sd = date("Y-m-d",$monday);
        $this_week_ed = date("Y-m-d",$sunday);
        
		$dt = date("Y-m-d");
        $end = date( "Y-m-d", strtotime('-6 days', strtotime($dt)) );
        
        $user_id = $this->post('user_id');
        $query = $this->db->query("SELECT * FROM `applicants` WHERE `id` = '".$user_id."'")->row_array();
        if(!empty($query))
        {
            if($query['role'] == 0){
                $this->db->select('t1.invite_id,t1.invite_date,t1.invite_time,ADDTIME(t1.invite_time,"01:00:00") as invite_expire,t1.current_status,t2.id as app_id,t2.first_name,t2.last_name,t2.username,t2.profile_img,t3.mentor_personal_message,COUNT(t4.rating) as rating_count,ROUND(AVG(t4.rating)) as rating_value,IF(t5.start_time IS NULL," ",ROUND(UNIX_TIMESTAMP(t5.start_time) * 1000)) as start_time,IF(t5.end_time IS NULL," ",ROUND(UNIX_TIMESTAMP(t5.end_time) * 1000)) as end_time,IF(t5.end_time IS NULL," ",UNIX_TIMESTAMP(t5.end_time) - UNIX_TIMESTAMP(t5.start_time)) AS duration');
                $this->db->from('invite t1');
                $this->db->where('t1.invite_from',$user_id);
                $this->db->where('t1.delete_sts',0);
                //$this->db->where('t1.current_status',0);
                $this->db->where('t1.approved',1);
                $this->db->where("t1.invite_date BETWEEN '$end' AND '$dt'");
                $this->db->join('applicants t2','t2.id=t1.invite_to','left');
                $this->db->join('mentor_details t3','t3.mentor_id=t1.invite_to','left');
                $this->db->join('review_ratings t4','t4.user_id=t1.invite_to','left');
				$this->db->join('call_logs t5','t5.invite_id=t1.invite_id','left');
				$this->db->order_by('t1.invite_id','desc');
                $this->db->group_by('t1.invite_id');
                $res = $this->db->get()->result_array();
                $week_result = $res;
            }
            if($query['role'] == 1){
                $this->db->select('t1.invite_id,t1.invite_date,t1.invite_time,ADDTIME(t1.invite_time,"01:00:00") as invite_expire,t1.current_status,t2.id as app_id,t2.first_name,t2.last_name,t2.username,t2.profile_img,IF(t5.start_time IS NULL," ",ROUND(UNIX_TIMESTAMP(t5.start_time) * 1000)) as start_time,IF(t5.end_time IS NULL," ",ROUND(UNIX_TIMESTAMP(t5.end_time) * 1000)) as end_time,IF(t5.end_time IS NULL," ",UNIX_TIMESTAMP(t5.end_time) - UNIX_TIMESTAMP(t5.start_time)) AS duration');
                $this->db->from('invite t1');
                $this->db->where('t1.invite_to',$user_id);
                $this->db->where('t1.delete_sts',0);
                //$this->db->where('t1.current_status',0);
                $this->db->where('t1.approved',1);
                $this->db->where("t1.invite_date BETWEEN '$end' AND '$dt'");
                $this->db->join('applicants t2','t2.id=t1.invite_from','left');
                $this->db->join('applicants_profile t3','t3.applicant_id=t1.invite_from','left');
				$this->db->join('call_logs t5','t5.invite_id=t1.invite_id','left');
				$this->db->order_by('t1.invite_id','desc');
                $res = $this->db->get()->result_array();
                
                $week_result = $res;
            }
             $resultSet = $week_result;
        
             $result = new stdClass();

             $result->success = true;
             $result->code = 200;
             $result->data = $resultSet;

             $this->set_response($result, REST_Controller::HTTP_CREATED);
        
        }else{
            $result = new stdClass();
            $result1 = new stdClass();
            $result->success = false;
            $result->code = 400;
            $result->data = $result1;
            $result->message = 'User does not exist';
            $this->set_response($result, REST_Controller::HTTP_CREATED);
        }
        
    }

    public function call_list_month_post()
    {
		$dt = date("Y-m-d");
        $end = date("Y-m-d", strtotime('-30 days', strtotime($dt)));
		//echo $end.'===='.$dt; exit;
        $user_id = $this->post('user_id');
        $query = $this->db->query("SELECT * FROM `applicants` WHERE `id` = '".$user_id."'")->row_array();
        if(!empty($query))
        {
            if($query['role'] == 0){
                $this->db->select('t1.invite_id,t1.invite_date,t1.invite_time,ADDTIME(t1.invite_time,"01:00:00") as invite_expire,t1.current_status,t2.id as app_id,t2.first_name,t2.last_name,t2.username,t2.profile_img,t3.mentor_personal_message,COUNT(t4.rating) as rating_count,ROUND(AVG(t4.rating)) as rating_value,IF(t5.start_time IS NULL," ",ROUND(UNIX_TIMESTAMP(t5.start_time) * 1000)) as start_time,IF(t5.end_time IS NULL," ",ROUND(UNIX_TIMESTAMP(t5.end_time) * 1000)) as end_time,IF(t5.end_time IS NULL," ",UNIX_TIMESTAMP(t5.end_time) - UNIX_TIMESTAMP(t5.start_time)) AS duration');
                $this->db->from('invite t1');
                $this->db->where('t1.invite_from',$user_id);
                $this->db->where('t1.delete_sts',0);
                //$this->db->where('t1.current_status',0);
                $this->db->where('t1.approved',1);
                $this->db->where("t1.invite_date BETWEEN '$end' AND '$dt'");
                $this->db->join('applicants t2','t2.id=t1.invite_to','left');
                $this->db->join('mentor_details t3','t3.mentor_id=t1.invite_to','left');
                $this->db->join('review_ratings t4','t4.user_id=t1.invite_to','left');
				$this->db->join('call_logs t5','t5.invite_id=t1.invite_id','left');
				$this->db->order_by('t1.invite_id','desc');
                $this->db->group_by('t1.invite_id');
                $res = $this->db->get()->result_array();
                $month_result = $res;
            }
            if($query['role'] == 1){
                $this->db->select('t1.invite_id,t1.invite_date,t1.invite_time,ADDTIME(t1.invite_time,"01:00:00") as invite_expire,t1.current_status,t2.id as app_id,t2.first_name,t2.last_name,t2.username,t2.profile_img,IF(t5.start_time IS NULL," ",ROUND(UNIX_TIMESTAMP(t5.start_time) * 1000)) as start_time,IF(t5.end_time IS NULL," ",ROUND(UNIX_TIMESTAMP(t5.end_time) * 1000)) as end_time,IF(t5.end_time IS NULL," ",UNIX_TIMESTAMP(t5.end_time) - UNIX_TIMESTAMP(t5.start_time)) AS duration');
                $this->db->from('invite t1');
                $this->db->where('t1.invite_to',$user_id);
                $this->db->where('t1.delete_sts',0);
                //$this->db->where('t1.current_status',0);
                $this->db->where('t1.approved',1);
                $this->db->where("t1.invite_date BETWEEN '$end' AND '$dt'");
                $this->db->join('applicants t2','t2.id=t1.invite_from','left');
                $this->db->join('applicants_profile t3','t3.applicant_id=t1.invite_from','left');
				$this->db->join('call_logs t5','t5.invite_id=t1.invite_id','left');
				$this->db->order_by('t1.invite_id','desc');
                $res = $this->db->get()->result_array();
                
                $month_result = $res;
            }
             $resultSet = $month_result;
        
             $result = new stdClass();

             $result->success = true;
             $result->code = 200;
             $result->data = $resultSet;

             $this->set_response($result, REST_Controller::HTTP_CREATED);
        
        }else{
            $result = new stdClass();
            $result1 = new stdClass();
            $result->success = false;
            $result->code = 400;
            $result->data = $result1;
            $result->message = 'User does not exist';
            $this->set_response($result, REST_Controller::HTTP_CREATED);
        }
        
    }
	
	public function push_notify_post()
	{
		$target = $this->post('reg_id');
		$data = array('body' 	=> 'You have a call with Guru',
		                       'title'	=> 'Time for Call',
							   'icon'	=> 'myicon',/*Default Icon*/
							   'sound' => 'mySound'/*Default sound*/
							  );
		$return = $this->sendFCMMessage($data,$target);	
		
        $result = new stdClass();
        $result->success = $return;
        $result->code = 200;		
        $this->set_response($result, REST_Controller::HTTP_CREATED);		
	}
	
	
	/* Example Parameter $data = array('from'=>'Lhe.io','title'=>'FCM Push Notifications');
	$target = 'single token id or topic name';
	or
	$target = array('token1','token2','...'); // up to 1000 in one request for group sending
	*/
	public function sendFCMMessage($data,$target){
		ob_start();
	   //FCM API end-point
	   $url = 'https://fcm.googleapis.com/fcm/send';
	   //api_key available in Firebase Console -> Project Settings -> CLOUD MESSAGING -> Server key
	   $server_key = 'AAAA83YswzY:APA91bFUoWdqC_AEyNvhhiIv1Zy4y9toz-HabJc5N05LTJ6iggVoBqccpT3fMdvogHsrfLHeyoNlrU-xgGpzHEh518YWZTY4rBYKipAPxMxY2hNa3Ic7nlFc5dVtKB3AJDnzPk2vUjKG';
				
	   $fields = array();
	   $fields['data'] = $data;
	   if(is_array($target)){
		$fields['registration_ids'] = $target;
	   }else{
		$fields['to'] = $target;
	   }
	   //header with content_type api key
	   $headers = array(
		'Content-Type:application/json',
			'Authorization:key='.$server_key
	   );
	   //CURL request to route notification to FCM connection server (provided by Google)			
	   $ch = curl_init();
	   curl_setopt($ch, CURLOPT_URL, $url);
	   curl_setopt($ch, CURLOPT_POST, true);
	   curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
	   curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	   curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
	   curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
	   curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));
	   $result = curl_exec($ch);
	   if ($result === FALSE) {
		die('Oops! FCM Send Error: ' . curl_error($ch));
	   }
	   curl_close($ch);
	   ob_end_flush();
	   return $result;
	}
    
}
